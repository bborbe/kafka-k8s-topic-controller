// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/kafka-k8s-topic-controller/purge"
)

type Purger struct {
	PurgeStub        func() error
	purgeMutex       sync.RWMutex
	purgeArgsForCall []struct {
	}
	purgeReturns struct {
		result1 error
	}
	purgeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Purger) Purge() error {
	fake.purgeMutex.Lock()
	ret, specificReturn := fake.purgeReturnsOnCall[len(fake.purgeArgsForCall)]
	fake.purgeArgsForCall = append(fake.purgeArgsForCall, struct {
	}{})
	fake.recordInvocation("Purge", []interface{}{})
	fake.purgeMutex.Unlock()
	if fake.PurgeStub != nil {
		return fake.PurgeStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.purgeReturns
	return fakeReturns.result1
}

func (fake *Purger) PurgeCallCount() int {
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	return len(fake.purgeArgsForCall)
}

func (fake *Purger) PurgeCalls(stub func() error) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = stub
}

func (fake *Purger) PurgeReturns(result1 error) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = nil
	fake.purgeReturns = struct {
		result1 error
	}{result1}
}

func (fake *Purger) PurgeReturnsOnCall(i int, result1 error) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = nil
	if fake.purgeReturnsOnCall == nil {
		fake.purgeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.purgeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Purger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Purger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ purge.Purger = new(Purger)
