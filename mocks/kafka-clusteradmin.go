// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/Shopify/sarama"
	"github.com/bborbe/kafka-k8s-topic-controller/kafka"
)

type KafkaClusterAdmin struct {
	CreateTopicStub        func(string, *sarama.TopicDetail, bool) error
	createTopicMutex       sync.RWMutex
	createTopicArgsForCall []struct {
		arg1 string
		arg2 *sarama.TopicDetail
		arg3 bool
	}
	createTopicReturns struct {
		result1 error
	}
	createTopicReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteTopicStub        func(string) error
	deleteTopicMutex       sync.RWMutex
	deleteTopicArgsForCall []struct {
		arg1 string
	}
	deleteTopicReturns struct {
		result1 error
	}
	deleteTopicReturnsOnCall map[int]struct {
		result1 error
	}
	ListTopicsStub        func() (map[string]sarama.TopicDetail, error)
	listTopicsMutex       sync.RWMutex
	listTopicsArgsForCall []struct {
	}
	listTopicsReturns struct {
		result1 map[string]sarama.TopicDetail
		result2 error
	}
	listTopicsReturnsOnCall map[int]struct {
		result1 map[string]sarama.TopicDetail
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *KafkaClusterAdmin) CreateTopic(arg1 string, arg2 *sarama.TopicDetail, arg3 bool) error {
	fake.createTopicMutex.Lock()
	ret, specificReturn := fake.createTopicReturnsOnCall[len(fake.createTopicArgsForCall)]
	fake.createTopicArgsForCall = append(fake.createTopicArgsForCall, struct {
		arg1 string
		arg2 *sarama.TopicDetail
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateTopic", []interface{}{arg1, arg2, arg3})
	fake.createTopicMutex.Unlock()
	if fake.CreateTopicStub != nil {
		return fake.CreateTopicStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createTopicReturns
	return fakeReturns.result1
}

func (fake *KafkaClusterAdmin) CreateTopicCallCount() int {
	fake.createTopicMutex.RLock()
	defer fake.createTopicMutex.RUnlock()
	return len(fake.createTopicArgsForCall)
}

func (fake *KafkaClusterAdmin) CreateTopicCalls(stub func(string, *sarama.TopicDetail, bool) error) {
	fake.createTopicMutex.Lock()
	defer fake.createTopicMutex.Unlock()
	fake.CreateTopicStub = stub
}

func (fake *KafkaClusterAdmin) CreateTopicArgsForCall(i int) (string, *sarama.TopicDetail, bool) {
	fake.createTopicMutex.RLock()
	defer fake.createTopicMutex.RUnlock()
	argsForCall := fake.createTopicArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaClusterAdmin) CreateTopicReturns(result1 error) {
	fake.createTopicMutex.Lock()
	defer fake.createTopicMutex.Unlock()
	fake.CreateTopicStub = nil
	fake.createTopicReturns = struct {
		result1 error
	}{result1}
}

func (fake *KafkaClusterAdmin) CreateTopicReturnsOnCall(i int, result1 error) {
	fake.createTopicMutex.Lock()
	defer fake.createTopicMutex.Unlock()
	fake.CreateTopicStub = nil
	if fake.createTopicReturnsOnCall == nil {
		fake.createTopicReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createTopicReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *KafkaClusterAdmin) DeleteTopic(arg1 string) error {
	fake.deleteTopicMutex.Lock()
	ret, specificReturn := fake.deleteTopicReturnsOnCall[len(fake.deleteTopicArgsForCall)]
	fake.deleteTopicArgsForCall = append(fake.deleteTopicArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteTopic", []interface{}{arg1})
	fake.deleteTopicMutex.Unlock()
	if fake.DeleteTopicStub != nil {
		return fake.DeleteTopicStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteTopicReturns
	return fakeReturns.result1
}

func (fake *KafkaClusterAdmin) DeleteTopicCallCount() int {
	fake.deleteTopicMutex.RLock()
	defer fake.deleteTopicMutex.RUnlock()
	return len(fake.deleteTopicArgsForCall)
}

func (fake *KafkaClusterAdmin) DeleteTopicCalls(stub func(string) error) {
	fake.deleteTopicMutex.Lock()
	defer fake.deleteTopicMutex.Unlock()
	fake.DeleteTopicStub = stub
}

func (fake *KafkaClusterAdmin) DeleteTopicArgsForCall(i int) string {
	fake.deleteTopicMutex.RLock()
	defer fake.deleteTopicMutex.RUnlock()
	argsForCall := fake.deleteTopicArgsForCall[i]
	return argsForCall.arg1
}

func (fake *KafkaClusterAdmin) DeleteTopicReturns(result1 error) {
	fake.deleteTopicMutex.Lock()
	defer fake.deleteTopicMutex.Unlock()
	fake.DeleteTopicStub = nil
	fake.deleteTopicReturns = struct {
		result1 error
	}{result1}
}

func (fake *KafkaClusterAdmin) DeleteTopicReturnsOnCall(i int, result1 error) {
	fake.deleteTopicMutex.Lock()
	defer fake.deleteTopicMutex.Unlock()
	fake.DeleteTopicStub = nil
	if fake.deleteTopicReturnsOnCall == nil {
		fake.deleteTopicReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteTopicReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *KafkaClusterAdmin) ListTopics() (map[string]sarama.TopicDetail, error) {
	fake.listTopicsMutex.Lock()
	ret, specificReturn := fake.listTopicsReturnsOnCall[len(fake.listTopicsArgsForCall)]
	fake.listTopicsArgsForCall = append(fake.listTopicsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListTopics", []interface{}{})
	fake.listTopicsMutex.Unlock()
	if fake.ListTopicsStub != nil {
		return fake.ListTopicsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTopicsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaClusterAdmin) ListTopicsCallCount() int {
	fake.listTopicsMutex.RLock()
	defer fake.listTopicsMutex.RUnlock()
	return len(fake.listTopicsArgsForCall)
}

func (fake *KafkaClusterAdmin) ListTopicsCalls(stub func() (map[string]sarama.TopicDetail, error)) {
	fake.listTopicsMutex.Lock()
	defer fake.listTopicsMutex.Unlock()
	fake.ListTopicsStub = stub
}

func (fake *KafkaClusterAdmin) ListTopicsReturns(result1 map[string]sarama.TopicDetail, result2 error) {
	fake.listTopicsMutex.Lock()
	defer fake.listTopicsMutex.Unlock()
	fake.ListTopicsStub = nil
	fake.listTopicsReturns = struct {
		result1 map[string]sarama.TopicDetail
		result2 error
	}{result1, result2}
}

func (fake *KafkaClusterAdmin) ListTopicsReturnsOnCall(i int, result1 map[string]sarama.TopicDetail, result2 error) {
	fake.listTopicsMutex.Lock()
	defer fake.listTopicsMutex.Unlock()
	fake.ListTopicsStub = nil
	if fake.listTopicsReturnsOnCall == nil {
		fake.listTopicsReturnsOnCall = make(map[int]struct {
			result1 map[string]sarama.TopicDetail
			result2 error
		})
	}
	fake.listTopicsReturnsOnCall[i] = struct {
		result1 map[string]sarama.TopicDetail
		result2 error
	}{result1, result2}
}

func (fake *KafkaClusterAdmin) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createTopicMutex.RLock()
	defer fake.createTopicMutex.RUnlock()
	fake.deleteTopicMutex.RLock()
	defer fake.deleteTopicMutex.RUnlock()
	fake.listTopicsMutex.RLock()
	defer fake.listTopicsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *KafkaClusterAdmin) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafka.ClusterAdmin = new(KafkaClusterAdmin)
